/* 

Animation Anahtar Kelimeleri

@keyframes
animation-name
animation-duration
animation-delay
animation-iteration-count
animation-direction
animation-timing-function
animation-fill-mode
animation


*/


/* 1 keyframes - 2 animation-name 3- animation-duration*/


.birinci {
    width: 100px;
    height: 100px;
    background-color: red;
    /* Dikkat eger bu renk burada verilmezse animationdan sonra kutu renksiz kalir */
    animation-name: example;
    /* Animation'u animation-name ile bagliyoruz */
    animation-duration: 4s;
    /* Bu kismi yazmayinca harekete gecmiyor! Default deger 0 cünkü */

}


@keyframes example {
    from {
        background-color: red;
        width: 200px;
    }

    to {
        background-color: yellow;
        height: 200px;
    }
}



/* from to yerine yüzde de kullanabiliriz ve bu sayede istedigimiz 
yerde animasyona müdahale edebiliriz. */



.ikinci {

    width: 100px;
    height: 100px;
    background-color: blue;
    animation-name: example2;
    animation-duration: 10s;

}

@keyframes example2 {
    0% {
        background-color: teal;
    }

    20% {
        background-color: tomato;
    }

    70% {
        background-color: turquoise;
    }

    100% {
        background-color: black;
    }
}


/* Position verme, delay ve Animation Iteration Count  */

.ucuncu {

    width: 100px;
    height: 100px;
    position: relative;
    /*Konumunu korumak icin burada position relative secildi*/
    background-color: red;
    animation-name: example3;
    animation-duration: 4s;
    animation-delay: 2s;
    /*Delay Animationun baslamasini geciktirir.*/
    animation-iteration-count: 3;
    /*Animation'un kac kez dönecegini belirtir
    Eger animasyonun sürekli calismasini istersek infinite secebiliriz..*/

}


@keyframes example3 {
    0% {
        background-color: red;
        left: 0px;
        top: 0px;
    }

    25% {
        background-color: yellow;
        left: 200px;
        top: 0px;
    }

    50% {
        background-color: blue;
        left: 200px;
        top: 200px;
    }

    75% {
        background-color: green;
        left: 0px;
        top: 200px;
    }

    100% {
        background-color: red;
        left: 0px;
        top: 0px;
    }
}



/*ANIMATION DIRECTION */


/* Animation direction'da;

normal: Animation yazildigi sekilde ileri dogru hareket eder
reverse: Animation tersten hareket eder
!!! alternate: Animasyonu önce düz sonra ters calistirir. 
Yani gittigi yerden geri döner. Fakat bu geri dönme hamlesini
yapabilmesi icin animation-iteration-count en az 2 olmalidir.
alternate-reverse:animasyon önce geriden baslar sonra ileri döner.
Burada da animation-iteration-count en az 2 olmalidir.


*/

.dorduncu{

    width: 100px;
    height: 100px;
    background-color: yellowgreen;
    position: relative;
    animation-name: example4;
    animation-duration: 4s;
    animation-iteration-count: 3;
    animation-direction: alternate-reverse; 

}

@keyframes example4 {
    0%   {background-color:red; left:0px; top:0px;}
    25%  {background-color:yellow; left:200px; top:0px;}
    50%  {background-color:blue; left:200px; top:200px;}
    75%  {background-color:green; left:0px; top:200px;}
    100% {background-color:red; left:0px; top:0px;}
  }



/* Animation Timing Function 

ease - Specifies an animation with a slow start, then fast, 
then end slowly (this is default)
linear - Specifies an animation with the same speed from start to end
ease-in - Specifies an animation with a slow start
ease-out - Specifies an animation with a slow end
ease-in-out - Specifies an animation with a slow start and end
cubic-bezier(n,n,n,n) - Lets you define your own values 
in a cubic-bezier function

*/

.besinci{

    width: 100px;
    height: 100px;
    background-color: turquoise;
    position: relative;
    animation-name: example5;
    animation-duration: 4s;
    animation-iteration-count: 3;
    animation-direction: alternate-reverse; 
    animation-timing-function: ease-in-out;

}

@keyframes example5 {
    0%   {background-color:red; left:0px; top:0px;}
    25%  {background-color:yellow; left:200px; top:0px;}
    50%  {background-color:blue; left:200px; top:200px;}
    75%  {background-color:green; left:0px; top:200px;}
    100% {background-color:red; left:0px; top:0px;}
  }



  /* animation-fill-mode
  
  node: Varsayılan değerdir. Animasyon işlemi bittikten sonra animasyon 
  uygulanan elemanın değerleri ilk haline döner.

  forwards: Animasyon işlemi bittikten sonra uygulanan değerler kalır. Örneğin rengi maviyse ve animasyon ile rengi kırmızıya dönmüşse, animasyon bittiğinde rengi kırmızı olarak kalır.


  backwards: Animasyon başlamadan önce ilk karedeki değerler uygulanır ve bittiğinde animasyon uygulanan eleman varsayılan değerlerine geri döner. Örneğin animasyon uygulanan elemanın rengi maviyse ve animasyonun ilk karesinde rengini kırmızıya döndürüyorsak, animasyon başlamamış bile olsa ilk karedeki değerler uygulanır. Animasyona başlangıç süresi verdiğimizde, bunu daha net görebiliriz.


  both: Animasyon başlamadan önce ilk karedeki değerler uygulanır, bittiğinde ise son karedeki uygulanan değerlerle birlikte kalır. Kısaca forwards ve backwards değerlerinin ikisini de kullanmak için kullanılır.
  
  */

  .altinci{
    width: 100px;
    height: 100px;
    background: red;
    position: relative;
    animation-name: example;
    animation-duration: 3s;  
    animation-delay: 2s;
    animation-fill-mode: both;
  }


  @keyframes example {
    from {top: 0px; background-color: yellow;}
    to {top: 200px;}
  }



  /* Animation Shorthand 
  
  Biz animation yazdigimizda direkt asagidaki gibi animasyon özelliklerini yan yana da yazabiliriz. Bu bize satirdan kazandiracaktir.

  */

.yedinci{
    animation: name duration timing-function delay iteration-count direction fill-mode;
}

  